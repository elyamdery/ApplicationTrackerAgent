{
  "info": {
    "name": "Application Tracker API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Collection of tests for the Application Tracker API"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global variables",
          "pm.globals.set('USE_UNIQUE_FOLDERS', true);",
          "pm.globals.set('RESPONSE_DIR', 'postman_responses');",
          "pm.globals.set('LOG_DIR', 'postman_logs');",
          "",
          "// Utility functions for saving responses and logs",
          "function saveResponseToFile(testName, useUniqueFolder = false, baseDir = 'postman_responses') {",
          "    // Create a clean test name (no spaces or special characters)",
          "    const cleanTestName = testName.replace(/[^a-zA-Z0-9]/g, '_');",
          "    ",
          "    // Generate a timestamp",
          "    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');",
          "    ",
          "    // Determine the directory path",
          "    let dirPath;",
          "    if (useUniqueFolder) {",
          "        dirPath = `${baseDir}/${cleanTestName}`;",
          "    } else {",
          "        dirPath = baseDir;",
          "    }",
          "    ",
          "    // Generate the file name",
          "    const fileName = `${cleanTestName}_${timestamp}.json`;",
          "    const filePath = `${dirPath}/${fileName}`;",
          "    ",
          "    console.log(`Response would be saved to: ${filePath}`);",
          "    ",
          "    return filePath;",
          "}",
          "",
          "function logToFile(testName, message, level = 'info', useUniqueFolder = false, baseDir = 'postman_logs') {",
          "    // Create a clean test name (no spaces or special characters)",
          "    const cleanTestName = testName.replace(/[^a-zA-Z0-9]/g, '_');",
          "    ",
          "    // Generate a timestamp",
          "    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');",
          "    ",
          "    // Determine the directory path",
          "    let dirPath;",
          "    if (useUniqueFolder) {",
          "        dirPath = `${baseDir}/${cleanTestName}`;",
          "    } else {",
          "        dirPath = baseDir;",
          "    }",
          "    ",
          "    // Generate the file name",
          "    const fileName = `${cleanTestName}_log_${timestamp}.txt`;",
          "    const filePath = `${dirPath}/${fileName}`;",
          "    ",
          "    // Format the log entry",
          "    const formattedLogEntry = `[${new Date().toISOString()}] [${level.toUpperCase()}] [${testName}] ${message}`;",
          "    ",
          "    console.log(`Log would be saved to: ${filePath}`);",
          "    console.log(formattedLogEntry);",
          "    ",
          "    return formattedLogEntry;",
          "}",
          "",
          "// Make functions available globally",
          "pm.globals.set('saveResponseToFile', saveResponseToFile.toString());",
          "pm.globals.set('logToFile', logToFile.toString());"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Get All Applications",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Get the test name",
              "const testName = pm.info.requestName;",
              "",
              "// Log the start of the test",
              "eval(pm.globals.get('logToFile'))(testName, 'Test started', 'info', pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('LOG_DIR'));",
              "",
              "// Test that the status code is 200",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "    ",
              "    // Log the status code",
              "    eval(pm.globals.get('logToFile'))(testName, `Status code: ${pm.response.code}`, 'info', pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('LOG_DIR'));",
              "});",
              "",
              "// Test that the response is JSON",
              "pm.test(\"Response is JSON\", function () {",
              "    pm.response.to.be.json;",
              "    ",
              "    // Log the response format",
              "    eval(pm.globals.get('logToFile'))(testName, 'Response is JSON', 'info', pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('LOG_DIR'));",
              "});",
              "",
              "// Test that the response has the success property",
              "pm.test(\"Response has success property\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('success');",
              "    ",
              "    // Log the success property",
              "    eval(pm.globals.get('logToFile'))(testName, `Success: ${responseJson.success}`, 'info', pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('LOG_DIR'));",
              "});",
              "",
              "// Test that the response has the applications property",
              "pm.test(\"Response has applications property\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('applications');",
              "    ",
              "    // Log the number of applications",
              "    eval(pm.globals.get('logToFile'))(testName, `Number of applications: ${responseJson.applications.length}`, 'info', pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('LOG_DIR'));",
              "});",
              "",
              "// Save the response to a file",
              "eval(pm.globals.get('saveResponseToFile'))(testName, pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('RESPONSE_DIR'));",
              "",
              "// Log the end of the test",
              "eval(pm.globals.get('logToFile'))(testName, 'Test completed', 'info', pm.globals.get('USE_UNIQUE_FOLDERS'), pm.globals.get('LOG_DIR'));"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "http://localhost:8080/api/applications",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["api", "applications"]
        },
        "description": "Retrieve all applications from the database"
      },
      "response": []
    },
    {
      "name": "Create Application",
      "request": {
        "method": "POST",
        "url": {
          "raw": "http://localhost:8080/api/applications",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["api", "applications"]
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"company\": \"Test Company\",\n    \"role\": \"Test Role\",\n    \"date_applied\": \"2025-04-12\",\n    \"status\": \"applied\",\n    \"notes\": \"Test notes\"\n}"
        },
        "description": "Create a new application"
      },
      "response": []
    },
    {
      "name": "Get Application by ID",
      "request": {
        "method": "GET",
        "url": {
          "raw": "http://localhost:8080/api/applications/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8080",
          "path": ["api", "applications", "1"]
        },
        "description": "Retrieve a specific application by ID"
      },
      "response": []
    }
  ]
}
